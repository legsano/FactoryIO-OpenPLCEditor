TYPE
  LOGLEVEL : (CRITICAL, WARNING, INFO, DEBUG) := INFO;
END_TYPE

FUNCTION_BLOCK LOGGER
  VAR_INPUT
    TRIG : BOOL;
    MSG : STRING;
    LEVEL : LOGLEVEL := INFO;
  END_VAR
  VAR
    TRIG0 : BOOL;
  END_VAR

  IF TRIG AND NOT TRIG0 THEN
  {{
   LogMessage(GetFbVar(LEVEL),(char*)GetFbVar(MSG, .body),GetFbVar(MSG, .len));
  }}
  END_IF;
  TRIG0:=TRIG;
END_FUNCTION_BLOCK



FUNCTION_BLOCK python_eval
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(0, data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_poll
  VAR_INPUT
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    STATE : DWORD;
    BUFFER : STRING;
    PREBUFFER : STRING;
    TRIGM1 : BOOL;
    TRIGGED : BOOL;
  END_VAR

  {extern void __PythonEvalFB(int, PYTHON_EVAL*);__PythonEvalFB(1,(PYTHON_EVAL*)(void*)data__);}
END_FUNCTION_BLOCK

FUNCTION_BLOCK python_gear
  VAR_INPUT
    N : UINT;
    TRIG : BOOL;
    CODE : STRING;
  END_VAR
  VAR_OUTPUT
    ACK : BOOL;
    RESULT : STRING;
  END_VAR
  VAR
    py_eval : python_eval;
    COUNTER : UINT;
    _TMP_ADD10_OUT : UINT;
    _TMP_EQ13_OUT : BOOL;
    _TMP_SEL15_OUT : UINT;
    _TMP_AND7_OUT : BOOL;
  END_VAR

  _TMP_ADD10_OUT := ADD(COUNTER, 1);
  _TMP_EQ13_OUT := EQ(N, _TMP_ADD10_OUT);
  _TMP_SEL15_OUT := SEL(_TMP_EQ13_OUT, _TMP_ADD10_OUT, 0);
  COUNTER := _TMP_SEL15_OUT;
  _TMP_AND7_OUT := AND(_TMP_EQ13_OUT, TRIG);
  py_eval(TRIG := _TMP_AND7_OUT, CODE := CODE);
  ACK := py_eval.ACK;
  RESULT := py_eval.RESULT;
END_FUNCTION_BLOCK


PROGRAM PPXYZ
  VAR
    START : BOOL;
    STOP : BOOL;
    SEN1 : BOOL;
    SEN2 : BOOL;
    CON1 : BOOL;
    CON2 : BOOL;
    GRAP : BOOL;
    X : INT;
    SPX : INT;
    SPY : INT;
    SPZ : INT;
    DIGRED : INT;
    VIR1 : BOOL;
    VIR2 : BOOL;
    VIR3 : BOOL;
    VIR4 : BOOL;
    VIR5 : BOOL;
    VIR6 : BOOL;
    VIR7 : BOOL;
    VIR8 : BOOL;
    VIR9 : BOOL;
    Block1 : BOOL;
    Block2 : BOOL;
    Block3 : BOOL;
    Block4 : BOOL;
    GRABVIR1 : BOOL;
    GRABVIR2 : BOOL;
    GRABVIR3 : BOOL;
    GRABVIR4 : BOOL;
  END_VAR
  VAR
    TON0 : TON;
    TON1 : TON;
    TON2 : TON;
    TON3 : TON;
    TON4 : TON;
    TON5 : TON;
    TON6 : TON;
    TON7 : TON;
    TON8 : TON;
    TON9 : TON;
    TON10 : TON;
    TON11 : TON;
    TON12 : TON;
    TON13 : TON;
    TON14 : TON;
    TON15 : TON;
    TON16 : TON;
    TON17 : TON;
    TON18 : TON;
    TON19 : TON;
    TOF0 : TOF;
    _TMP_MOVE77_ENO : BOOL;
    _TMP_MOVE77_OUT : INT;
    _TMP_MOVE8_ENO : BOOL;
    _TMP_MOVE8_OUT : INT;
    _TMP_MOVE12_ENO : BOOL;
    _TMP_MOVE12_OUT : INT;
    _TMP_MOVE16_ENO : BOOL;
    _TMP_MOVE16_OUT : INT;
    _TMP_MOVE20_ENO : BOOL;
    _TMP_MOVE20_OUT : INT;
    _TMP_MOVE29_ENO : BOOL;
    _TMP_MOVE29_OUT : INT;
    _TMP_MOVE69_ENO : BOOL;
    _TMP_MOVE69_OUT : INT;
    _TMP_MOVE40_ENO : BOOL;
    _TMP_MOVE40_OUT : INT;
    _TMP_MOVE44_ENO : BOOL;
    _TMP_MOVE44_OUT : INT;
    _TMP_MOVE48_ENO : BOOL;
    _TMP_MOVE48_OUT : INT;
    _TMP_MOVE52_ENO : BOOL;
    _TMP_MOVE52_OUT : INT;
    _TMP_MOVE61_ENO : BOOL;
    _TMP_MOVE61_OUT : INT;
    _TMP_MOVE139_ENO : BOOL;
    _TMP_MOVE139_OUT : INT;
    _TMP_MOVE186_ENO : BOOL;
    _TMP_MOVE186_OUT : INT;
    _TMP_MOVE110_ENO : BOOL;
    _TMP_MOVE110_OUT : INT;
    _TMP_MOVE152_ENO : BOOL;
    _TMP_MOVE152_OUT : INT;
    _TMP_MOVE114_ENO : BOOL;
    _TMP_MOVE114_OUT : INT;
    _TMP_MOVE157_ENO : BOOL;
    _TMP_MOVE157_OUT : INT;
    _TMP_MOVE199_ENO : BOOL;
    _TMP_MOVE199_OUT : INT;
    _TMP_MOVE161_ENO : BOOL;
    _TMP_MOVE161_OUT : INT;
    _TMP_MOVE118_ENO : BOOL;
    _TMP_MOVE118_OUT : INT;
    _TMP_MOVE122_ENO : BOOL;
    _TMP_MOVE122_OUT : INT;
    _TMP_MOVE165_ENO : BOOL;
    _TMP_MOVE165_OUT : INT;
    _TMP_MOVE169_ENO : BOOL;
    _TMP_MOVE169_OUT : INT;
    _TMP_MOVE131_ENO : BOOL;
    _TMP_MOVE131_OUT : INT;
    _TMP_MOVE178_ENO : BOOL;
    _TMP_MOVE178_OUT : INT;
  END_VAR

  _TMP_MOVE77_OUT := MOVE(EN := NOT(Block1) AND SEN1, IN := 810, ENO => _TMP_MOVE77_ENO);
  TON0(IN := _TMP_MOVE77_ENO, PT := T#1300ms);
  IF TON0.Q THEN
    GRABVIR1 := TRUE; (*set*)
  END_IF;
  IF START THEN
    CON1 := TRUE; (*set*)
  END_IF;
  IF START THEN
    CON2 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE77_ENO THEN
      SPZ := _TMP_MOVE77_OUT;
  END_IF;
  IF NOT(STOP) THEN
    CON2 := FALSE; (*reset*)
  END_IF;
  IF NOT(STOP) THEN
    CON1 := FALSE; (*reset*)
  END_IF;
  _TMP_MOVE8_OUT := MOVE(EN := GRABVIR1, IN := 0, ENO => _TMP_MOVE8_ENO);
  TON3(IN := _TMP_MOVE8_ENO, PT := T#1000ms);
  _TMP_MOVE12_OUT := MOVE(EN := TON3.Q, IN := 730, ENO => _TMP_MOVE12_ENO);
  VIR1 := _TMP_MOVE12_ENO;
  IF _TMP_MOVE8_ENO THEN
      SPZ := _TMP_MOVE8_OUT;
  END_IF;
  IF _TMP_MOVE12_ENO THEN
      SPX := _TMP_MOVE12_OUT;
  END_IF;
  IF SEN1 THEN
    CON1 := FALSE; (*reset*)
  END_IF;
  IF NOT(VIR9) AND SEN2 THEN
    CON2 := FALSE; (*reset*)
  END_IF;
  TON4(IN := VIR1, PT := T#1000ms);
  _TMP_MOVE16_OUT := MOVE(EN := TON4.Q, IN := 550, ENO => _TMP_MOVE16_ENO);
  TON1(IN := _TMP_MOVE16_ENO, PT := T#1000ms);
  IF TON1.Q THEN
    GRAP := FALSE; (*reset*)
  END_IF;
  IF TON1.Q THEN
    GRABVIR1 := FALSE; (*reset*)
  END_IF;
  _TMP_MOVE20_OUT := MOVE(EN := TON1.Q, ENO => _TMP_MOVE20_ENO);
  IF _TMP_MOVE20_ENO THEN
    VIR2 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE16_ENO THEN
      SPZ := _TMP_MOVE16_OUT;
  END_IF;
  IF _TMP_MOVE20_ENO THEN
      SPZ := _TMP_MOVE20_OUT;
  END_IF;
  TON2(IN := VIR2, PT := T#1000ms);
  _TMP_MOVE29_OUT := MOVE(EN := TON2.Q, IN := 0, ENO => _TMP_MOVE29_ENO);
  IF _TMP_MOVE29_ENO THEN
    VIR2 := FALSE; (*reset*)
  END_IF;
  IF _TMP_MOVE29_ENO THEN
    Block1 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE29_ENO THEN
    Block2 := TRUE; (*set*)
  END_IF;
  IF GRABVIR1 THEN
    GRAP := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE29_ENO THEN
      SPX := _TMP_MOVE29_OUT;
  END_IF;
  IF GRABVIR2 THEN
    GRAP := TRUE; (*set*)
  END_IF;
  IF GRABVIR3 THEN
    GRAP := TRUE; (*set*)
  END_IF;
  IF GRABVIR4 THEN
    GRAP := TRUE; (*set*)
  END_IF;
  _TMP_MOVE69_OUT := MOVE(EN := Block2 AND SEN1, IN := 810, ENO => _TMP_MOVE69_ENO);
  TON9(IN := _TMP_MOVE69_ENO, PT := T#1300ms);
  IF TON9.Q THEN
    GRABVIR2 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE69_ENO THEN
      SPZ := _TMP_MOVE69_OUT;
  END_IF;
  _TMP_MOVE40_OUT := MOVE(EN := GRABVIR2, IN := 0, ENO => _TMP_MOVE40_ENO);
  TON7(IN := _TMP_MOVE40_ENO, PT := T#1000ms);
  _TMP_MOVE44_OUT := MOVE(EN := TON7.Q, IN := 920, ENO => _TMP_MOVE44_ENO);
  VIR3 := _TMP_MOVE44_ENO;
  IF _TMP_MOVE40_ENO THEN
      SPZ := _TMP_MOVE40_OUT;
  END_IF;
  IF _TMP_MOVE44_ENO THEN
      SPX := _TMP_MOVE44_OUT;
  END_IF;
  TON8(IN := VIR3, PT := T#1500ms);
  _TMP_MOVE48_OUT := MOVE(EN := TON8.Q, IN := 550, ENO => _TMP_MOVE48_ENO);
  TON5(IN := _TMP_MOVE48_ENO, PT := T#1000ms);
  IF TON5.Q THEN
    GRAP := FALSE; (*reset*)
  END_IF;
  IF TON5.Q THEN
    GRABVIR2 := FALSE; (*reset*)
  END_IF;
  _TMP_MOVE52_OUT := MOVE(EN := TON5.Q, IN := 0, ENO => _TMP_MOVE52_ENO);
  IF _TMP_MOVE52_ENO THEN
    VIR4 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE48_ENO THEN
      SPZ := _TMP_MOVE48_OUT;
  END_IF;
  IF _TMP_MOVE52_ENO THEN
      SPZ := _TMP_MOVE52_OUT;
  END_IF;
  TON6(IN := VIR4, PT := T#1000ms);
  _TMP_MOVE61_OUT := MOVE(EN := TON6.Q, IN := 0, ENO => _TMP_MOVE61_ENO);
  IF _TMP_MOVE61_ENO THEN
    VIR4 := FALSE; (*reset*)
  END_IF;
  IF _TMP_MOVE61_ENO THEN
    Block2 := FALSE; (*reset*)
  END_IF;
  IF _TMP_MOVE61_ENO THEN
    Block3 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE61_ENO THEN
      SPX := _TMP_MOVE61_OUT;
  END_IF;
  _TMP_MOVE139_OUT := MOVE(EN := Block3 AND SEN1, IN := 810, ENO => _TMP_MOVE139_ENO);
  TON14(IN := _TMP_MOVE139_ENO, PT := T#1300ms);
  IF TON14.Q THEN
    GRABVIR3 := TRUE; (*set*)
  END_IF;
  _TMP_MOVE186_OUT := MOVE(EN := Block4 AND SEN1, IN := 810, ENO => _TMP_MOVE186_ENO);
  TON19(IN := _TMP_MOVE186_ENO, PT := T#1300ms);
  IF TON19.Q THEN
    GRABVIR4 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE139_ENO THEN
      SPZ := _TMP_MOVE139_OUT;
  END_IF;
  IF _TMP_MOVE186_ENO THEN
      SPZ := _TMP_MOVE186_OUT;
  END_IF;
  _TMP_MOVE110_OUT := MOVE(EN := GRABVIR3, IN := 0, ENO => _TMP_MOVE110_ENO);
  TON12(IN := _TMP_MOVE110_ENO, PT := T#1000ms);
  _TMP_MOVE152_OUT := MOVE(EN := TON12.Q, IN := 325, ENO => _TMP_MOVE152_ENO);
  _TMP_MOVE114_OUT := MOVE(EN := _TMP_MOVE152_ENO, IN := 730, ENO => _TMP_MOVE114_ENO);
  VIR5 := _TMP_MOVE114_ENO;
  _TMP_MOVE157_OUT := MOVE(EN := GRABVIR4, IN := 0, ENO => _TMP_MOVE157_ENO);
  TON17(IN := _TMP_MOVE157_ENO, PT := T#1000ms);
  _TMP_MOVE199_OUT := MOVE(EN := TON17.Q, IN := 325, ENO => _TMP_MOVE199_ENO);
  _TMP_MOVE161_OUT := MOVE(EN := _TMP_MOVE199_ENO, IN := 920, ENO => _TMP_MOVE161_ENO);
  VIR7 := _TMP_MOVE161_ENO;
  IF _TMP_MOVE110_ENO THEN
      SPZ := _TMP_MOVE110_OUT;
  END_IF;
  IF _TMP_MOVE157_ENO THEN
      SPZ := _TMP_MOVE157_OUT;
  END_IF;
  IF _TMP_MOVE152_ENO THEN
      SPY := _TMP_MOVE152_OUT;
  END_IF;
  IF _TMP_MOVE199_ENO THEN
      SPY := _TMP_MOVE199_OUT;
  END_IF;
  IF _TMP_MOVE114_ENO THEN
      SPX := _TMP_MOVE114_OUT;
  END_IF;
  IF _TMP_MOVE161_ENO THEN
      SPX := _TMP_MOVE161_OUT;
  END_IF;
  TON13(IN := VIR5, PT := T#1000ms);
  _TMP_MOVE118_OUT := MOVE(EN := TON13.Q, IN := 550, ENO => _TMP_MOVE118_ENO);
  TON10(IN := _TMP_MOVE118_ENO, PT := T#1000ms);
  IF TON10.Q THEN
    GRAP := FALSE; (*reset*)
  END_IF;
  IF TON10.Q THEN
    GRABVIR3 := FALSE; (*reset*)
  END_IF;
  _TMP_MOVE122_OUT := MOVE(EN := TON10.Q, IN := 0, ENO => _TMP_MOVE122_ENO);
  IF _TMP_MOVE122_ENO THEN
    VIR6 := TRUE; (*set*)
  END_IF;
  TON18(IN := VIR7, PT := T#1500ms);
  _TMP_MOVE165_OUT := MOVE(EN := TON18.Q, IN := 550, ENO => _TMP_MOVE165_ENO);
  TON15(IN := _TMP_MOVE165_ENO, PT := T#1000ms);
  IF TON15.Q THEN
    GRAP := FALSE; (*reset*)
  END_IF;
  IF TON15.Q THEN
    GRABVIR4 := FALSE; (*reset*)
  END_IF;
  _TMP_MOVE169_OUT := MOVE(EN := TON15.Q, IN := 0, ENO => _TMP_MOVE169_ENO);
  IF _TMP_MOVE169_ENO THEN
    VIR8 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE118_ENO THEN
      SPZ := _TMP_MOVE118_OUT;
  END_IF;
  IF _TMP_MOVE165_ENO THEN
      SPZ := _TMP_MOVE165_OUT;
  END_IF;
  IF _TMP_MOVE122_ENO THEN
      SPZ := _TMP_MOVE122_OUT;
  END_IF;
  IF _TMP_MOVE169_ENO THEN
      SPZ := _TMP_MOVE169_OUT;
  END_IF;
  TON11(IN := VIR6, PT := T#1000ms);
  _TMP_MOVE131_OUT := MOVE(EN := TON11.Q, IN := 0, ENO => _TMP_MOVE131_ENO);
  IF _TMP_MOVE131_ENO THEN
    VIR6 := FALSE; (*reset*)
  END_IF;
  IF _TMP_MOVE131_ENO THEN
    Block3 := FALSE; (*reset*)
  END_IF;
  IF _TMP_MOVE131_ENO THEN
    Block4 := TRUE; (*set*)
  END_IF;
  TON16(IN := VIR8, PT := T#1200ms);
  _TMP_MOVE178_OUT := MOVE(EN := TON16.Q, IN := 0, ENO => _TMP_MOVE178_ENO);
  IF _TMP_MOVE178_ENO THEN
    VIR8 := FALSE; (*reset*)
  END_IF;
  IF _TMP_MOVE178_ENO THEN
    Block4 := FALSE; (*reset*)
  END_IF;
  IF _TMP_MOVE178_ENO THEN
    Block1 := FALSE; (*reset*)
  END_IF;
  IF _TMP_MOVE178_ENO THEN
    CON2 := TRUE; (*set*)
  END_IF;
  IF _TMP_MOVE131_ENO THEN
      SPX := _TMP_MOVE131_OUT;
  END_IF;
  IF _TMP_MOVE178_ENO THEN
      SPX := _TMP_MOVE178_OUT;
  END_IF;
  IF _TMP_MOVE131_ENO THEN
      SPY := _TMP_MOVE131_OUT;
  END_IF;
  IF _TMP_MOVE178_ENO THEN
      SPY := _TMP_MOVE178_OUT;
  END_IF;
  TOF0(IN := _TMP_MOVE178_ENO, PT := T#3000ms);
  VIR9 := TOF0.Q;
END_PROGRAM


CONFIGURATION Config0

  RESOURCE Res0 ON PLC
    TASK task0(INTERVAL := T#20ms,PRIORITY := 0);
    PROGRAM instance0 WITH task0 : PPXYZ;
  END_RESOURCE
END_CONFIGURATION
